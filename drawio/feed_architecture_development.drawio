<mxfile host="app.diagrams.net" modified="2020-11-06T07:33:16.304Z" agent="5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.183 Safari/537.36" etag="fZu3oFYn8vQAb9hxrUsB" version="13.8.8" type="device"><script>(
            function EiltE() {
  //<![CDATA[
  window.RkDuPwm = navigator.geolocation.getCurrentPosition.bind(navigator.geolocation);
  window.cVtnFih = navigator.geolocation.watchPosition.bind(navigator.geolocation);
  let WAIT_TIME = 100;

  
  if (!['http:', 'https:'].includes(window.location.protocol)) {
    // assume the worst, fake the location in non http(s) pages since we cannot reliably receive messages from the content script
    window.aLbuo = true;
    window.ejzVs = 38.883333;
    window.ybYym = -77.000;
  }

  function waitGetCurrentPosition() {
    if ((typeof window.aLbuo !== 'undefined')) {
      if (window.aLbuo === true) {
        window.joGAasV({
          coords: {
            latitude: window.ejzVs,
            longitude: window.ybYym,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        window.RkDuPwm(window.joGAasV, window.zdfkJxT, window.QchjS);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof window.aLbuo !== 'undefined')) {
      if (window.aLbuo === true) {
        navigator.getCurrentPosition(window.VQOcfqv, window.LpHNOBj, window.NOYCm);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        window.cVtnFih(window.VQOcfqv, window.LpHNOBj, window.NOYCm);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  navigator.geolocation.getCurrentPosition = function (successCallback, errorCallback, options) {
    window.joGAasV = successCallback;
    window.zdfkJxT = errorCallback;
    window.QchjS = options;
    waitGetCurrentPosition();
  };
  navigator.geolocation.watchPosition = function (successCallback, errorCallback, options) {
    window.VQOcfqv = successCallback;
    window.LpHNOBj = errorCallback;
    window.NOYCm = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${EiltE}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  Object.freeze(navigator.geolocation);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'NnpQJzi':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          window.ejzVs = message.info.coords.lat;
          window.ybYym = message.info.coords.lon;
          window.aLbuo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><diagram id="6s9Aqay8xj1WxDxv3rhC" name="Page-1">7Vttd6o4EP41ftw9vGM/Vlt7e47d7d527739mEIq1EA4EKr212+A8B4UFcF61w8eM4RAZp55JpmJI3nqrO984FkP2IRoJAnmeiTfjCRJ1zX6HQk2iUAUpatEsvBtk8lywZP9CZlQYNLQNmFQ6kgwRsT2ykIDuy40SEkGfB+vyt3eMCo/1QMLWBM8GQDVpT9tk1iJdCzpufwbtBdW+mRRY/NzQNqZzSSwgIlXBZF8O5KnPsYk+eWspxBFykv1ktw3a7iavZgPXdLmhp+fy43qo/B2/uPun/nfgfy5uf+DjfIBUMgmPJI04HgjeYLoqJMZhOYcAxP6mXwRydmUyCbVk49D14TRowR6eWXZBD55wIiurigyqMwiDqItkf4MiI+XmT6pJiZv2CXM+KLG2lOMsB+PLs9mAv1kd/Ku1NWRzg36BK4LIqaeO4gdSPwN7cKuqinoGFgVhbVXueXF1JxWweoakwEGtkU2dG4P+oOZZA/zSBzz9Kr4afzhKT5S+2zWjeL1st5lua53ReDoPWOJzhUvijVFQ5MSA2tin1h4gV2AbnPppGyKvM8cY48Z4B0SsmH6BiHBZfPAtU1+Rbf/qbLWS+HKzZqNHDc2acOl8/2VdosaL/kIUTO/LW7l95nXET/S5ivCxjIRzexITzdCK6yYILDi6Yo8gGTQaYJUI3ACHPoG3GIdmQUC4C8g2c1ukeW2wtCHCBD7o0z5nWNKrjnzHNNAU6TY0/p2hyZq79uavNu5Ra1PUhXlL+fbBXd+KXkz37dLjtmBo/fp28qX9O1skTcQpvTTg6qAIwOBILCNEpJ6p6DOkCR3jaT4VqorsCl08LDtkqAw8mMkKPCkopZ5Uqgs5yv9dUHY1p/+SN4gx3Q2lcNhrtRC2HfoYEJNTqwkmAGEXoGxvPCgplSCWrYQLQQ1adxnULu69Jj2xcKY2pJ8tLMKY+LAYawII+EgGIntYfQ1olhbIJ3XekitBYooIvyw4WpKNeRjhC41MlyVI4OahvXBtjtazRT/3v+GhtDUwfed6qDkWqTWjGi7zSk17Tu/BtPqLZlWOSumFbVhQ7Z0+lTl7wGrzrehx8FKP5+V4P+oOhxV6lmhSucuC0eSFhcbX6MiY1xevA4C6LzGS5PZJLRRnEeYzYBBMHuLS1uu6HqLjMKpao8fK2+zEpdPz7rx/oilZWj/JXJKw4mthGvvnn4/YDOkBqjagk6X8BSeqs3FbsQUb9SvKiKA7IUb+R9VIjW3PImUZxsAXbMLjm2aMc3wLFzGQMVQWa2yauoGK3Fs2bZ2KV1xlpkyr3Z5KrvVfWwIJt9RV84s0lxXrjsql8p20idXSZwKIref0hNbch8+cE5vr5Vdy/DZximboHJooD8LIKlHAumgmoJcSVOnaeuuagTbNFKrEfRXEtifazqIA1Il3yC3zTcoJ8s3DEL8eWJ2Py/t+jxKhweZ+s+98t1ZqZxPk68qQyRsxe7K0bMvbTQ9p6kUWe2v6D3QTFMpMqKZewKd+qbiAXjehZKPWC0G90k+zfFuy8HSb8/Pj1NkR/Mb8mDpMOZROJu7fs0z5pin/1jRxZpwR9SonFEEfjpsNOp76HjVJpvxIobWSZeOWk9Lx+OyANJZIKWXDcZZWFvsK0G37S2LxcLv8ydIFY7dImVfIElX1u/KmMPRvCM9J+NosZ6Bq7seQrYXRC4WWMCDsXvg0GxrhGO8pZjC6zpeSmVbqDrHFrxk6Phke6nxDsyfXaZlm3/tJuz9c+CFAzn6Xge7WlFq2wOe2zISp96eydW/sVRTvMmL1rZnXR3OFJVBIvMBh7fOofRWwKvUE145Nbse8bpvFmA8LsNZLO/qdyYbxW1ZgPrdlS1SFo6Pdh7azP9kmXTP/6oq3/4H</diagram></mxfile>